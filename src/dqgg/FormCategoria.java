package dqgg;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 * Formulario de Categorias
 * @author AntonioSousa
 */
public class FormCategoria extends javax.swing.JFrame {
    private static final long serialVersionUID = 1L;
    JFileChooser fcImagem;   // Janela (dialog) para selecao de arquivos de imagem    
    BD dqggDB;
    Categoria categoriaAtual = new Categoria();   // Registro atualmente exibido
    HashMap filtroConsulta = new HashMap();        // Filtro de consulta atual
    ArrayList<Categoria> catsConsulta = new ArrayList<Categoria>();        // registros retornado pela consulta corrente
    int indiceCategoria = 0;
    
    enum Modo {INCLUSAO, ALTERACAO, CONSULTA};
    Modo modoForm = Modo.ALTERACAO;
    
    /**
     * Creates new form FormBD
     */
    public FormCategoria() {
        initComponents();        
        
        File directory = new File(DQGG.pathImg + "img/");            
        fcImagem = new JFileChooser(directory);
        
        //Acrescenta um filtro para listar somente imagens  
        this.fcImagem.addChoosableFileFilter(new ImageFilter());
        this.fcImagem.setAcceptAllFileFilterUsed(false);

        //Adiciona icones customizados para os tipos de arquivos
        this.fcImagem.setFileView(new ImageFileView());

        //Adiciona o painel de visualizacao
        this.fcImagem.setAccessory(new ImagePreview(this.fcImagem));
                
        categoriaAtual = categoriaAtual.buscaPrimeiro();
        this.atualizaFormulario(categoriaAtual);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNome = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        PanelNavigator = new javax.swing.JPanel();
        btPrimeiro = new javax.swing.JButton();
        btAnterior = new javax.swing.JButton();
        btProximo = new javax.swing.JButton();
        btUltimo = new javax.swing.JButton();
        btIncluir = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btConfirmar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btConsultar = new javax.swing.JButton();

        setTitle("DQSG(G) - Categorias");
        setMaximumSize(new java.awt.Dimension(865, 158));
        setMinimumSize(new java.awt.Dimension(865, 158));
        setPreferredSize(new java.awt.Dimension(865, 158));
        setResizable(false);

        txtNome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Nome:");

        PanelNavigator.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btPrimeiro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btPrimeiro.setText("|<");
        btPrimeiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrimeiroActionPerformed(evt);
            }
        });

        btAnterior.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btAnterior.setText("<");
        btAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnteriorActionPerformed(evt);
            }
        });

        btProximo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btProximo.setText(">");
        btProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProximoActionPerformed(evt);
            }
        });

        btUltimo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btUltimo.setText(">|");
        btUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUltimoActionPerformed(evt);
            }
        });

        btIncluir.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btIncluir.setText("Incluir");
        btIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIncluirActionPerformed(evt);
            }
        });

        btExcluir.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btConfirmar.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btConfirmar.setText("Confirmar");
        btConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmarActionPerformed(evt);
            }
        });

        btCancelar.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btConsultar.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btConsultar.setText("Consultar");
        btConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelNavigatorLayout = new javax.swing.GroupLayout(PanelNavigator);
        PanelNavigator.setLayout(PanelNavigatorLayout);
        PanelNavigatorLayout.setHorizontalGroup(
            PanelNavigatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelNavigatorLayout.createSequentialGroup()
                .addComponent(btPrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(btAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btProximo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btConfirmar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        PanelNavigatorLayout.setVerticalGroup(
            PanelNavigatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelNavigatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btPrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btProximo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(PanelNavigator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PanelNavigator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void entraModoConsulta()
    {        
        this.modoForm = Modo.CONSULTA;
        this.limpaCampos();
        // Altera a cor dos campos 
        this.txtNome.setBackground(DQGG.corConsulta);
        
    }
    
    private void entraModoAlteracao()
    {
        this.modoForm = Modo.ALTERACAO;
        // Altera a cor dos campos 
        this.txtNome.setBackground(DQGG.corAlteracao);
       
    }
    
    private void entraModoInclusao()
    {
        this.modoForm = Modo.INCLUSAO;
        this.limpaCampos();
        // Altera a cor dos campos 
        this.txtNome.setBackground(DQGG.corInsercao);
        
    }
    
    private void atualizaFormulario(Categoria rep)
    {
        // Atualiza os valores dos campos de texto
        this.txtNome.setText(rep.getDescricao());
       
    }
    
    private void limpaCampos()
    {
        // Atualiza os valores dos campos de texto
        this.txtNome.setText("");
    }
    
    private void btConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmarActionPerformed
        HashMap camposAlterados = new HashMap();        
                
        if (this.modoForm == Modo.INCLUSAO)
        {
            // Valida os campos 
            if (this.txtNome.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(this,"Campo Nome obrigatório!","ERRO",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Insere a representacao no banco
            Categoria rep = new Categoria(0, this.txtNome.getText());            
            rep.insereBD();
            this.entraModoAlteracao();
        
            //Navega para o registro incluido
            Categoria r = this.categoriaAtual.buscaUltimo();            
            this.atualizaFormulario(categoriaAtual=r);
            
        } else if (this.modoForm == Modo.CONSULTA) {
            if (this.catsConsulta.isEmpty())
            {   
                // Verifica os campos que foram preenchidos            
                if (!this.txtNome.getText().isEmpty())           
                    this.filtroConsulta.put("NOME", this.txtNome.getText());

                if (this.filtroConsulta.isEmpty()) 
                {
                   JOptionPane.showMessageDialog(this,"Não há parâmetros para busca!","ALERTA",JOptionPane.INFORMATION_MESSAGE);               
                }
                else
                {
                   this.catsConsulta = this.categoriaAtual.consultaBD(this.filtroConsulta);    
                   this.categoriaAtual = this.catsConsulta.get(0);    // pega o primeiro registro da consulta
                   indiceCategoria = 0;
                   this.atualizaFormulario(categoriaAtual);
                }
            }
            
        } else if (this.modoForm == Modo.ALTERACAO) {
            // Valida os campos 
            if (this.txtNome.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(this,"Campo Nome obrigatório!.","ERRO",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Verifica os campos que foram alterados            
            if (!this.txtNome.getText().equals(this.categoriaAtual.getDescricao()))           
                camposAlterados.put("NOME", this.txtNome.getText());
            
            if (camposAlterados.isEmpty()) 
            {
               JOptionPane.showMessageDialog(this,"Não há alterações a serem salvas!.","ALERTA",JOptionPane.INFORMATION_MESSAGE);               
            }
            else
            {
               if (this.categoriaAtual.atualizaBD(camposAlterados))                    
                   JOptionPane.showMessageDialog(this,"Dados alterados com sucesso!");
               else
                   JOptionPane.showMessageDialog(this,"Erro durante a atualização de dados!","ERRO",JOptionPane.ERROR_MESSAGE);
            }                
        }
        
        
    }//GEN-LAST:event_btConfirmarActionPerformed

    private void btPrimeiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrimeiroActionPerformed
        if (this.modoForm == Modo.ALTERACAO)    // vai para o primeiro registro da tabela
        {
            Categoria r = this.categoriaAtual.buscaPrimeiro();
            if (r != null)
                this.atualizaFormulario(categoriaAtual=r);
        }
        else if ((this.modoForm == Modo.CONSULTA)&&(!this.catsConsulta.isEmpty()))    // vai para o primeiro registro da consulta
        {
            this.categoriaAtual = this.catsConsulta.get(0);
            this.atualizaFormulario(categoriaAtual);
        }
    }//GEN-LAST:event_btPrimeiroActionPerformed

    private void btUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUltimoActionPerformed
        if (this.modoForm == Modo.ALTERACAO)
        {
            Categoria r = this.categoriaAtual.buscaUltimo();
            if (r != null)
                this.atualizaFormulario(categoriaAtual=r);
        }
        else if ((this.modoForm == Modo.CONSULTA)&&(!this.catsConsulta.isEmpty()))    // vai para o ultimo registro da consulta
        {
            indiceCategoria = this.catsConsulta.size()-1;
            this.categoriaAtual = this.catsConsulta.get(indiceCategoria);
            this.atualizaFormulario(categoriaAtual);
        }
    }//GEN-LAST:event_btUltimoActionPerformed

    private void btAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAnteriorActionPerformed
        if (this.modoForm == Modo.ALTERACAO)
        {
            Categoria r = this.categoriaAtual.buscaAnterior(this.categoriaAtual);
            if (r != null)
                this.atualizaFormulario(categoriaAtual=r);
        }
        else if ((this.modoForm == Modo.CONSULTA)&&(!this.catsConsulta.isEmpty()))    // vai para o registro anterior da consulta
        {
            if (indiceCategoria > 0) 
                indiceCategoria--;
            this.categoriaAtual = this.catsConsulta.get(indiceCategoria);
            this.atualizaFormulario(categoriaAtual);
        }
    }//GEN-LAST:event_btAnteriorActionPerformed

    private void btProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProximoActionPerformed
        if (this.modoForm == Modo.ALTERACAO)
        {
            Categoria r = this.categoriaAtual.buscaProximo(this.categoriaAtual);
            if (r != null)
                this.atualizaFormulario(categoriaAtual=r);
        }
        else if ((this.modoForm == Modo.CONSULTA)&&(!this.catsConsulta.isEmpty()))    // vai para o registro anterior da consulta
        {
            if (indiceCategoria < (this.catsConsulta.size()-1)) 
                indiceCategoria++;
            this.categoriaAtual = this.catsConsulta.get(indiceCategoria);
            this.atualizaFormulario(categoriaAtual);
        }
    }//GEN-LAST:event_btProximoActionPerformed

    private void btIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIncluirActionPerformed
        if (this.modoForm == Modo.CONSULTA)   //Limpa os registros e o filtro de consulta
        {              
                 this.catsConsulta.clear();           
                 this.filtroConsulta.clear();    
        }        
        this.entraModoInclusao();        
    }//GEN-LAST:event_btIncluirActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
           if (this.modoForm == Modo.CONSULTA)   //Limpa os registros e o filtro de consulta
           {              
                    this.catsConsulta.clear();           
                    this.filtroConsulta.clear();    
           }
            this.entraModoAlteracao();
            if (this.categoriaAtual == null)  // consulta que não retornou nenhum registro
            {
                this.categoriaAtual = this.categoriaAtual.buscaPrimeiro();                
            }
            this.atualizaFormulario(categoriaAtual);       
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarActionPerformed
        if (this.modoForm == Modo.CONSULTA)
        {            
                this.catsConsulta.clear();
                this.filtroConsulta.clear();            
        }
        this.entraModoConsulta();        
    }//GEN-LAST:event_btConsultarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        if (this.modoForm != Modo.ALTERACAO)
            return;
        
        int opcao = JOptionPane.showConfirmDialog(this,
                                              "Confirmar exclusão do registro?",
                                              "CONFIRMAÇÃO",
                                              JOptionPane.YES_NO_OPTION);
        if (opcao == JOptionPane.YES_OPTION) 
        {
           // Pega o registro anterior ao atual
           Categoria rep = this.categoriaAtual.buscaAnterior(categoriaAtual);
           if (rep == null)
               rep = this.categoriaAtual.buscaProximo(categoriaAtual);
                      
           if (this.categoriaAtual.exclui()){
               JOptionPane.showMessageDialog(this,"Dados alterados com sucesso!");               
               this.atualizaFormulario(this.categoriaAtual=rep);
           } else {
               JOptionPane.showMessageDialog(this,"Erro durante a esclusão de dados!","ERRO",JOptionPane.ERROR_MESSAGE);
           }
        }
        
    }//GEN-LAST:event_btExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormCategoria().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelNavigator;
    private javax.swing.JButton btAnterior;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btConfirmar;
    private javax.swing.JButton btConsultar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btIncluir;
    private javax.swing.JButton btPrimeiro;
    private javax.swing.JButton btProximo;
    private javax.swing.JButton btUltimo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
